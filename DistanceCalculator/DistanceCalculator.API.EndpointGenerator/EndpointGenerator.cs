using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace DistanceCalculator.API.EndpointGenerator;

[Generator]
public class EndpointGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax,
                static (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(node => node is not null);

        var compilation = context.CompilationProvider
            .Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, Execute);
    }

    private static void Execute(SourceProductionContext context,
        (Compilation Left, ImmutableArray<ClassDeclarationSyntax> Right) tuple)
    {
        var (compilation, classes) = tuple;

        var codeBuilder = new StringBuilder();

        foreach (var syntax in classes)
        {
            var symbol = compilation.GetSemanticModel(syntax.SyntaxTree)
                .GetDeclaredSymbol(syntax) as INamedTypeSymbol;

            if (!symbol!.AllInterfaces.Any(i => string.Equals(i.Name, "IEndpoint", StringComparison.InvariantCultureIgnoreCase)))
            {
                continue;
            }

            codeBuilder.AppendLine($"new {symbol.Name}().MapEndpoints(builder);");
        }

        var code = $$"""
                         // <auto-generated />

                         namespace DistanceCalculator.API.Endpoints;

                         public static class EndpointsExtension
                         {
                             public static IEndpointRouteBuilder RegisterEndpoints(this IEndpointRouteBuilder builder)
                             {
                                 // Discovery: Endpoint mappings.
                                 {{codeBuilder}}
                                 
                                 return builder;
                             }
                         }
                         """;

        context.AddSource("EndpointsExtensions.g.cs", code);
    }
}
